// <auto-generated />
using System;
using Addmition__Elgibilty_K_A.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Addmition__Elgibilty_K_A.Migrations
{
    [DbContext(typeof(DataBaseAE))]
    [Migration("20220102102637_khaled")]
    partial class khaled
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Areas.Identity.Data.Addmition__Elgibilty_K_AUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.Acceptaple_Config", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accept")
                        .HasColumnType("bit");

                    b.Property<string>("Acceptable_wishes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Acceptaple_configuration");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.Emplolyee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nick_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone_Number")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.Faculty", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Faculty_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type_of_certificateid")
                        .HasColumnType("int");

                    b.Property<string>("specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Type_of_certificateid");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Blood_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Civil_Registriation_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Civil_Registrition_No")
                        .HasColumnType("int");

                    b.Property<string>("Current_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Father_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Full_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Home_s_Phone")
                        .HasColumnType("int");

                    b.Property<int>("Identity_No")
                        .HasColumnType("int");

                    b.Property<string>("Marital_status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mobile_Phone")
                        .HasColumnType("int");

                    b.Property<string>("Mother_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nick_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Passport_No")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("high_school_certificate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.Type_of_certificate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Type_of_certificate");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.Wishess", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("wish_faculty1id")
                        .HasColumnType("int");

                    b.Property<int?>("wish_faculty2id")
                        .HasColumnType("int");

                    b.Property<int?>("wish_faculty3id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.HasIndex("wish_faculty1id");

                    b.HasIndex("wish_faculty2id");

                    b.HasIndex("wish_faculty3id");

                    b.ToTable("Wishss");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.admission_eligibility_request", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image_of_crtificat_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("The_Rate")
                        .HasColumnType("int");

                    b.Property<string>("back_image_of_identity_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("check_recipt_image_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city_of_high_school_cirtificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date_of_high_school_cirtificate")
                        .HasColumnType("datetime2");

                    b.Property<string>("front_image_of_identity_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type_of_cirtificate_sy_or_forighn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("admission_eligibility_request");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.setting_of_specialties", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Chair_count")
                        .HasColumnType("int");

                    b.Property<int>("Minemum_rate")
                        .HasColumnType("int");

                    b.Property<int?>("Stautues_of_admi_eligiid")
                        .HasColumnType("int");

                    b.Property<int?>("facultyid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Stautues_of_admi_eligiid");

                    b.HasIndex("facultyid");

                    b.ToTable("setting_of_specialties");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.statues_of_admission_elgibilty", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type_Of_admission_elgibilty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("begaining_date_of_the_process")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("semesterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("semesterNo")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("statues_of_admission_elgibilty");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.statues_of_student", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accept")
                        .HasColumnType("bit");

                    b.Property<bool>("Checked_document")
                        .HasColumnType("bit");

                    b.Property<bool>("Checked_recipet")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date_of_Acshiving")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Employee_Infoid")
                        .HasColumnType("int");

                    b.Property<int?>("Student_InfoId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Employee_Infoid");

                    b.HasIndex("Student_InfoId");

                    b.ToTable("Statues_of_student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.admission_ligibility_request_SY", b =>
                {
                    b.HasBaseType("Addmition__Elgibilty_K_A.Model.admission_eligibility_request");

                    b.Property<string>("LAnguge_of_the_addmintion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subscription_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("course_number")
                        .HasColumnType("int");

                    b.ToTable("admission_ligibility_request_SY");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.Acceptaple_Config", b =>
                {
                    b.HasOne("Addmition__Elgibilty_K_A.Model.Student", "Student_Info")
                        .WithOne("Acceptable_coniguration")
                        .HasForeignKey("Addmition__Elgibilty_K_A.Model.Acceptaple_Config", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student_Info");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.Faculty", b =>
                {
                    b.HasOne("Addmition__Elgibilty_K_A.Model.Type_of_certificate", "Type_of_certificate")
                        .WithMany()
                        .HasForeignKey("Type_of_certificateid");

                    b.Navigation("Type_of_certificate");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.Wishess", b =>
                {
                    b.HasOne("Addmition__Elgibilty_K_A.Model.Student", "student_Info")
                        .WithOne("wishess")
                        .HasForeignKey("Addmition__Elgibilty_K_A.Model.Wishess", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Addmition__Elgibilty_K_A.Model.Faculty", "wish_faculty1")
                        .WithMany()
                        .HasForeignKey("wish_faculty1id");

                    b.HasOne("Addmition__Elgibilty_K_A.Model.Faculty", "wish_faculty2")
                        .WithMany()
                        .HasForeignKey("wish_faculty2id");

                    b.HasOne("Addmition__Elgibilty_K_A.Model.Faculty", "wish_faculty3")
                        .WithMany()
                        .HasForeignKey("wish_faculty3id");

                    b.Navigation("student_Info");

                    b.Navigation("wish_faculty1");

                    b.Navigation("wish_faculty2");

                    b.Navigation("wish_faculty3");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.admission_eligibility_request", b =>
                {
                    b.HasOne("Addmition__Elgibilty_K_A.Model.Student", "student_Info")
                        .WithOne("A_E_R")
                        .HasForeignKey("Addmition__Elgibilty_K_A.Model.admission_eligibility_request", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student_Info");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.setting_of_specialties", b =>
                {
                    b.HasOne("Addmition__Elgibilty_K_A.Model.statues_of_admission_elgibilty", "Stautues_of_admi_eligi")
                        .WithMany()
                        .HasForeignKey("Stautues_of_admi_eligiid");

                    b.HasOne("Addmition__Elgibilty_K_A.Model.Faculty", "faculty")
                        .WithMany()
                        .HasForeignKey("facultyid");

                    b.Navigation("faculty");

                    b.Navigation("Stautues_of_admi_eligi");
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.statues_of_student", b =>
                {
                    b.HasOne("Addmition__Elgibilty_K_A.Model.Emplolyee", "Employee_Info")
                        .WithMany()
                        .HasForeignKey("Employee_Infoid");

                    b.HasOne("Addmition__Elgibilty_K_A.Model.Student", "Student_Info")
                        .WithMany()
                        .HasForeignKey("Student_InfoId");

                    b.Navigation("Employee_Info");

                    b.Navigation("Student_Info");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Addmition__Elgibilty_K_A.Areas.Identity.Data.Addmition__Elgibilty_K_AUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Addmition__Elgibilty_K_A.Areas.Identity.Data.Addmition__Elgibilty_K_AUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Addmition__Elgibilty_K_A.Areas.Identity.Data.Addmition__Elgibilty_K_AUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Addmition__Elgibilty_K_A.Areas.Identity.Data.Addmition__Elgibilty_K_AUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.admission_ligibility_request_SY", b =>
                {
                    b.HasOne("Addmition__Elgibilty_K_A.Model.admission_eligibility_request", null)
                        .WithOne()
                        .HasForeignKey("Addmition__Elgibilty_K_A.Model.admission_ligibility_request_SY", "id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Addmition__Elgibilty_K_A.Model.Student", b =>
                {
                    b.Navigation("A_E_R");

                    b.Navigation("Acceptable_coniguration");

                    b.Navigation("wishess");
                });
#pragma warning restore 612, 618
        }
    }
}
